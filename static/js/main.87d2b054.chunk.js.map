{"version":3,"sources":["utils/useLocalStorage.ts","SettingsContext.tsx","Settings.tsx","DataContext.tsx","utils/parser.ts","SingleRandomItem.tsx","utils/rdwt.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["parseValue","initialValue","value","JSON","parse","useLocalStorage","key","React","window","localStorage","getItem","setValue","newValue","handleStorage","event","addEventListener","removeEventListener","setItem","stringify","stringifyValue","SettingsContext","SettingsProvider","children","projects","setProjects","selectedProject","setSelectedProject","Provider","find","item","googleSheetId","addProject","project","removeProject","id","filter","selectProject","projectId","NewProjectForm","name","columns","weightColumnName","newProject","setNewProject","handleChange","e","target","split","onSubmit","preventDefault","Object","values","i","length","htmlFor","onChange","type","defaultValue","map","index","Settings","onClick","DataContext","DataProvider","data","setData","fetch","then","res","json","feed","entry","reduce","acc","next","parser","getData","fn","getRandomItem","currentItem","newItem","items","weightCallback","Array","isArray","TypeError","Function","total","w","r","Math","random","console","warn","rdwt","Number","frequency","german","SingleRandomItem","english","notes","context","log","className","App","style","width","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.87d2b054.chunk.js","sourcesContent":["import * as React from \"react\";\n\nfunction parseValue<T>(initialValue: T, value?: any) {\n  if (typeof initialValue === \"object\") {\n    return value ? JSON.parse(value) : initialValue;\n  }\n  return value || initialValue;\n}\nfunction stringifyValue<T>(initialValue: T, value?: any) {\n  if (typeof initialValue === \"object\") {\n    return JSON.stringify(value || initialValue);\n  }\n  return value || initialValue;\n}\n\nexport function useLocalStorage<T extends string | number | object>(\n  key: string,\n  initialValue: T\n): [T, React.Dispatch<T>] {\n  const [value, setValue] = React.useState(\n    parseValue(initialValue, window.localStorage.getItem(key))\n  );\n\n  const setItem = (newValue: string) => {\n    setValue(newValue);\n    window.localStorage.setItem(key, stringifyValue(initialValue, newValue));\n  };\n\n  React.useEffect(() => {\n    const newValue = window.localStorage.getItem(key);\n    if (value !== newValue) {\n      setValue(parseValue(initialValue, newValue));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleStorage = React.useCallback(\n    (event: StorageEvent) => {\n      if (event.key === key && event.newValue !== value) {\n        setValue(parseValue(initialValue, event.newValue));\n      }\n    },\n    [initialValue, key, value]\n  );\n\n  React.useEffect(() => {\n    window.addEventListener(\"storage\", handleStorage);\n    return () => window.removeEventListener(\"storage\", handleStorage);\n  }, [handleStorage]);\n\n  return [value, setItem as any];\n}\n","import * as React from \"react\";\nimport { useLocalStorage } from \"./utils/useLocalStorage\";\n\nimport { Project } from \"./types\";\n\ninterface SettingContextValue {\n  projects: Project[];\n  selectedProject?: Project;\n  removeProject: (id: string) => void;\n  addProject: (project: Project) => void;\n  selectProject: (projectId: string) => void;\n}\n\nexport let SettingsContext = React.createContext({} as SettingContextValue);\n\nexport let SettingsProvider: React.FC = ({ children }) => {\n  let [projects, setProjects] = useLocalStorage<Project[]>(\"projects\", []);\n  let [selectedProject, setSelectedProject] = useLocalStorage<string>(\n    \"selectedProject\",\n    \"\"\n  );\n\n  let removeProject = (id: string) => {\n    setProjects(projects.filter((item) => item.googleSheetId !== id));\n  };\n\n  let addProject = (project: Project) => {\n    setProjects([...projects, project]);\n  };\n\n  let selectProject = (projectId: string) => {\n    setSelectedProject(projectId);\n  };\n\n  return (\n    <SettingsContext.Provider\n      value={{\n        projects,\n        selectedProject: projects.find(\n          (item) => item.googleSheetId === selectedProject\n        ),\n        addProject,\n        removeProject,\n        selectProject,\n      }}\n    >\n      {children}\n    </SettingsContext.Provider>\n  );\n};\n","import * as React from \"react\";\nimport { SettingsContext } from \"./SettingsContext\";\nimport { Project } from \"./types\";\n\nexport let NewProjectForm: React.FC = () => {\n  let { addProject } = React.useContext(SettingsContext);\n  let [newProject, setNewProject] = React.useState<Project>({\n    name: \"\",\n    googleSheetId: \"\",\n    columns: \"\",\n    weightColumnName: \"\",\n  });\n\n  let handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (\n      Object.values(newProject).filter((i) => i === null && i === \"\").length < 2\n    ) {\n      addProject(newProject);\n    }\n  };\n\n  let handleChange = (name: string) => (\n    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>\n  ) => {\n    let { value } = e.target;\n    setNewProject((project) => ({ ...project, [name]: value }));\n  };\n\n  let columns = newProject.columns.split(\",\");\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <label htmlFor=\"name\">Project Name</label>\n        <input\n          onChange={handleChange(\"name\")}\n          type=\"text\"\n          name=\"name\"\n          value={newProject.name}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"googleSheetId\">Google Sheet Id</label>\n        <input\n          onChange={handleChange(\"googleSheetId\")}\n          type=\"text\"\n          name=\"googleSheetId\"\n          value={newProject.googleSheetId}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"columns\">Columns (seperate with comma)</label>\n        <input\n          onChange={handleChange(\"columns\")}\n          type=\"text\"\n          name=\"columns\"\n          value={newProject.columns}\n        />\n      </div>\n      <div>\n        <label htmlFor=\"weightColumnName\">Weight Column Name</label>\n        <select\n          onChange={handleChange(\"weightColumnName\")}\n          name=\"weightColumnName\"\n          id=\"weightColumnName\"\n          defaultValue={columns[0]}\n        >\n          {columns.map((item, index) => (\n            <option key={item} value={item}>\n              {item}\n            </option>\n          ))}\n        </select>\n      </div>\n      <button type=\"submit\">Add</button>\n    </form>\n  );\n};\n\nexport let Settings: React.FC = () => {\n  let { projects, selectProject } = React.useContext(SettingsContext);\n\n  return (\n    <div>\n      {projects.map((project) => (\n        <div key={project.googleSheetId}>\n          <button onClick={() => selectProject(project.googleSheetId)}>\n            {project.name}\n          </button>\n        </div>\n      ))}\n      <NewProjectForm />\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport { Item } from \"./types\";\nimport { parser } from \"./utils/parser\";\nimport { SettingsContext } from \"./SettingsContext\";\nimport { Settings } from \"./Settings\";\n\nexport type FilterFn = (data: Item[]) => Item[];\n\ninterface DataContextValue {\n  data: Item[];\n  getData: (fn: FilterFn) => Item[];\n}\nexport let DataContext = React.createContext<DataContextValue>({} as any);\n\nexport let DataProvider: React.FC = ({ children }) => {\n  let { selectedProject } = React.useContext(SettingsContext);\n  let [data, setData] = React.useState<Item[] | null>(null);\n  let getData = (fn: FilterFn = (data) => data) => fn(data || []);\n\n  React.useEffect(() => {\n    if (selectedProject) {\n      fetch(\n        `https://spreadsheets.google.com/feeds/list/${selectedProject.googleSheetId}/1/public/full?alt=json`\n      )\n        .then((res) => res.json())\n        .then((data) => {\n          if (selectedProject) {\n            setData(parser(selectedProject, data));\n          }\n        });\n    }\n  }, [selectedProject]);\n\n  if (!selectedProject) {\n    return <Settings />;\n  }\n  return (\n    <DataContext.Provider value={{ data: data || [], getData }}>\n      {!data ? <>Loading</> : <>{children}</>}\n    </DataContext.Provider>\n  );\n};\n","import { Item, Project } from \"../types\";\n\nexport function parser(project: Project, data: any): Item[] {\n  return data.feed.entry.map((item: any) => {\n    return project.columns.split(\",\").reduce((acc, next) => {\n      return {\n        ...acc,\n        [next]: item[`gsx$${next}`][\"$t\"],\n      };\n    }, {});\n  });\n}\n","import * as React from \"react\";\nimport { DataContext } from \"./DataContext\";\nimport { Item } from \"./types\";\nimport { rdwt } from \"./utils/rdwt\";\nimport { SettingsContext } from \"./SettingsContext\";\n\nfunction getRandomItem(data: Item[], currentItem?: Item): Item {\n  let newItem = rdwt(data, (i) => Number(i.frequency));\n  if (currentItem && newItem.german === currentItem.german) {\n    return getRandomItem(data, currentItem);\n  } else {\n    return newItem;\n  }\n}\n\nexport let SingleRandomItem: React.FC = () => {\n  let { data } = React.useContext(DataContext);\n  let { selectedProject } = React.useContext(SettingsContext);\n  let [item, setItem] = React.useState<Item>(getRandomItem(data));\n\n  let next = () => {\n    setItem(getRandomItem(data, item));\n  };\n  let { german, english, notes, frequency, context } = item;\n  console.log(selectedProject?.weightColumnName);\n  return (\n    <div className=\"p-4 h-full flex flex-col\">\n      <div className=\"h-full flex-1\">\n        <div>\n          <span className=\"text-sm px-2 py-1 rounded-md bg-orange-400\">\n            frequency: <span className=\"font-bold\">{frequency}</span>\n          </span>\n          <span> </span>\n          <span className=\"text-sm px-2 py-1 rounded-md bg-orange-400\">\n            context: <span className=\"font-bold\">{context}</span>\n          </span>\n        </div>\n        <div className=\"h-4\"></div>\n        <div>\n          <h4 className=\"text-xl font-bold\">German</h4>\n          <p>{german}</p>\n        </div>\n        <div className=\"h-4\"></div>\n        <div>\n          <h4 className=\"text-xl font-bold\">English</h4>\n          <p>{english}</p>\n        </div>\n        <div className=\"h-4\"></div>\n        {notes !== \"\" && (\n          <div>\n            <h4 className=\"text-xl font-bold\">Notes</h4>\n            <p>{notes}</p>\n          </div>\n        )}\n      </div>\n      <button\n        className=\"bg-indigo-700 text-white rounded-md shadow-sm px-4 py-2 w-full\"\n        onClick={next}\n      >\n        Next\n      </button>\n    </div>\n  );\n};\n","export function rdwt<T>(items: T[], weightCallback: (item: T) => number): T {\n  if (!Array.isArray(items)) {\n    throw new TypeError(\"Items is not a array!\");\n  }\n  if (!(weightCallback && weightCallback instanceof Function)) {\n    throw new TypeError(\"weight callback is not a function!\");\n  }\n  let total = 0;\n  for (let i = 0; i < items.length; i++) {\n    let w = weightCallback(items[i]);\n    if (typeof w != \"number\") {\n      throw new TypeError(\"weightCallback does not produce number!\");\n    }\n    total += w;\n  }\n  let r = Math.random() * total;\n  for (let i = 0; i < items.length; i++) {\n    total -= weightCallback(items[i]);\n    if (total <= r) {\n      return items[i];\n    }\n  }\n  console.warn(\"rdwt weight fallback to the last item\");\n  return items[items.length - 1];\n}\n","import React from \"react\";\n\nimport { DataProvider } from \"./DataContext\";\nimport { SettingsProvider } from \"./SettingsContext\";\nimport { SingleRandomItem } from \"./SingleRandomItem\";\n\nfunction App() {\n  return (\n    <SettingsProvider>\n      <DataProvider>\n        <div className=\"flex items-center justify-center\">\n          <div\n            style={{ width: \"600px\" }}\n            className=\"bg-gray-200 max-w-md w-64 max-h-full h-screen\"\n          >\n            <SingleRandomItem />\n          </div>\n        </div>\n      </DataProvider>\n    </SettingsProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}